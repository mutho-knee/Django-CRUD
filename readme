# To integrate mpesa into your project
    in the terminal, write pip install django-daraja
                           python manage.py migrate
    create a file called .env
        in settings,
         under installed apps add 'django_daraja',
         allowed host[127.0.0.1]
    in .env, Enter the following details
        MPESA_ENVIRONMENT = sandbox(send money), live(pay bill)
        MPESA_CONSUMER_KEY = (get from daraja- create an app)
        MPESA_CONSUMER_SECRET = (get from daraja- create an app)
        LNM_PHONE_NUMBER = 254707747964
        MPESA_PASSKEY = (api, mpesa express, simulate, test credentials at the bottom)
        MPESA_EXPRESS_SHORTCODE = (api, mpesa express, simulate, test credentials at the bottom)
    in views, do all the necessary imports
        from __future__ import unicode_literals - should be at the top
        from django_daraja.mpesa import utils
        from django.http import HttpResponse, JsonResponse
        from django.views.generic import View
        from django_daraja.mpesa.core import MpesaClient
        from decouple import config
        from datetime import datetime
     Start of mpesa instances and variables
        cl = MpesaClient()
        stk_push_callback_url = 'https://api.darajambili.com/express-payment'
        b2c_callback_url = ''
     End of mpesa instances and variables
      then go ahead to define the payment function
# Generating forms
    pip install the following:
        django-crispy-forms
        crispy-bootstrap4
    in settings, write the following:
        At the bottom
            STATIC_URL = 'static/'
            STATICFILES_DIRS = [
                 BASE_DIR / "static"
            ]

            CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap4'
            CRISPY_TEMPLATE_PACK = 'bootstrap4'
        Under installed apps
            'crispy_forms',
            'crispy_bootstrap4',
        in the base.html
             {% load static %}
             {% load crispy_forms_tags %}
             <link rel="stylesheet" href="{% static 'bootstrap/css/bootstrap.css' %}">
        in the other places form is required, e.g login & register:
             {% extends 'base.html' %}
             {% load static %}
             {% load crispy_forms_filters %}
             {% load crispy_forms_tags %}

             {% csrf_token %} - must be there
             # form generated by django
             <form action="" method="post">
                <div class="row">
                    <div class="col-3"></div>
                    <div class="col-6">
                        {% csrf_token %}
                        <fieldset class="form-group">
                            <legend class="border-bottom mb-4">Title</legend>
                            {{ form|crispy }}
                        </fieldset>
                        <input class="btn-info" value="Register / login" type="submit">
                    </div>
                    <div class="col-3"></div>
                </div>
            </form>
             # django form ends here
             # own generated form
               <form action="" method="post">
                        {% csrf_token %}
                        <div class="form-group">
                            <input class="form-control"  type="text" name="jina" placeholder="Enter name" required>
                        </div>
                        <div class="form-group">
                            <input class="form-control" type="text" name="kiasi" placeholder="Enter quantity" required>
                        </div>
                        <div class="form-group">
                            <input class="form-control" type="text" name="bei" placeholder="Enter price" required>
                        </div>
                        <div class="form-group">
                            <input class="btn btn-info" type="submit" name="btn-submit" value="Save">
                        </div>
                    </form>
               # own generated form ends
                * note, the action in form should be left blank but in adding products - {% url 'the products page' %}
# urls
    imports to be made:
        from . import views as general_views
        from django.contrib.auth import views as auth_views
    defining paths:
     if you've defined your own function in views
         path('htmlfile/', general_views.htmlfile, name='htmlfile'),
     if you're using django generated functions e.g in login&logout
         path('logout/', auth_views.LogoutView.as_view(template_name='logout.html'), name='logout'),
     in instances where you've defined a function to target a single item - deleting an item
         path('delete-product/<id>', general_views.delete_product, name='delete-product'),

# creating tables


